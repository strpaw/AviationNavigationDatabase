# -*- coding: utf-8 -*-
"""
/***************************************************************************
 AviationNavigationDBDialog
                                 A QGIS plugin
 Tools for dealing with aviation data in PostGIS
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2020-05-19
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Pawe≈Ç Strzelewicz
        email                : @
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from PyQt5 import uic
from PyQt5.QtWidgets import QWidget, QMessageBox, QDialog, QFileDialog


FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'obstacle_dialog_base.ui'))


class ObstacleDialog(QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(ObstacleDialog, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        self.comboBoxObstInsertMethod.currentIndexChanged.connect(self.change_obstacle_insert_method)
        self.pushButtonSelecteTODFile.clicked.connect(self.select_etod_file)
        self.pushButtonImporteTOD.clicked.connect(self.import_etod)

    def change_obstacle_insert_method(self):
        self.stackedWidgetObstInsertMethod.setCurrentIndex(self.comboBoxObstInsertMethod.currentIndex())

    def select_etod_file(self):
        etod_file = QFileDialog.getOpenFileName(self, "Select eTOD file", "", '(*.csv *.dat)')[0]
        if etod_file:
            self.lineEditeTODFile.setText(etod_file)

    def import_etod(self):
        etod_file = self.lineEditeTODFile.text().strip()
        if etod_file:
            if os.path.isfile(etod_file):
                pass  # TODO: Implement importing eTOD file into database
            else:
                QMessageBox.critical(QWidget(), "Message", '{} is not a file!'.format(etod_file))
        else:
            QMessageBox.critical(QWidget(), "Message", 'Select eTOD data file!')