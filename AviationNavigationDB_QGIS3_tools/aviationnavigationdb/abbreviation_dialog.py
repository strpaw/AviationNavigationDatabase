# -*- coding: utf-8 -*-
"""
/***************************************************************************
 AviationNavigationDBDialog
                                 A QGIS plugin
 Tools for dealing with aviation data in PostGIS
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2020-06-11
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Pawe≈Ç Strzelewicz
        email                : @
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from PyQt5 import uic
from PyQt5.QtWidgets import QWidget, QMessageBox, QDialog, QFileDialog
from qgis.core import *

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'abbreviation_dialog.ui'))


class AbbreviationDialog(QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(AbbreviationDialog, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        self.table_name = 'abbreviation'
        self.pushButtonInsert.clicked.connect(self.insert_abbreviation)
        self.lineEditAbbrev.textChanged.connect(self.set_bg_abbrev_white)
        self.plainTextEditTerm.textChanged.connect(self.set_bg_term_white)

    def set_bg_abbrev_white(self):
        self.lineEditAbbrev.setStyleSheet("QLineEdit {background-color: white}")

    def set_bg_term_white(self):
        self.plainTextEditTerm.setStyleSheet("QPlainTextEdit {background-color: white}")

    def validate_input(self):
        err_msg = ''
        if self.lineEditAbbrev.text().strip() == '':
            self.lineEditAbbrev.setStyleSheet("QLineEdit {background-color: red}")
            err_msg += 'Abbreviation is required.\n'
        elif len(self.lineEditAbbrev.text()) > 20:
            self.lineEditAbbrev.setStyleSheet("QLineEdit {background-color: red}")
            err_msg += 'Abbreviation is too long. Max 20 characters.\n'

        if self.plainTextEditTerm.toPlainText().strip() == '':
            self.plainTextEditTerm.setStyleSheet("QPlainTextEdit {background-color: red}")
            err_msg += 'Term is required.\n'
        elif len(self.plainTextEditTerm.toPlainText()) > 300:
            self.plainTextEditTerm.setStyleSheet("QPlainTextEdit {background-color: red}")
            err_msg += 'Term is to long. Max 300 characters.\n'

        if err_msg:
            QMessageBox.critical(QWidget(), "Message", err_msg)
            return False
        return True

    def insert_abbreviation(self):
        if self.validate_input():
            layer = QgsProject.instance().mapLayersByName(self.table_name)[0]
            feat = QgsFeature(layer.fields())
            feat.setAttribute('abbrev', self.lineEditAbbrev.text())
            feat.setAttribute('term', self.plainTextEditTerm.toPlainText())
            layer.dataProvider().addFeatures([feat])
            layer.commitChanges()